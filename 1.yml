---
- hosts: '{{ host }}'
  connection: local
  gather_facts: False


  roles:
    - role: paloaltonetworks.paloaltonetworks
    
  tasks:

    - name: Create template variables
      script: test1.py '{{ username }}' '{{ password }}' '{{ panorama }}' '{{ item.template }}' '{{ host }}'
      register: python_variables
      with_items:
        - "{{ hostvars[transit_fw_az1] }}"        

    - name: Debug variables
      debug:
        var: python_variables.results[0].stdout_lines
        
    - name: Create a new cgw for AZ1
      ec2_customer_gateway:
        bgp_asn: '{{ item.bgp_asn }}'
        ip_address: '{{ item.untrust_ip }}'
        aws_secret_key: '{{ aws_secret_key }}'
        aws_access_key: '{{ aws_access_key }}'        
        name: "{{ item.hostname }}-CGW"
        region: '{{ region }}'
      register: cgw
      with_items:
        - "{{ hostvars[transit_fw_az1] }}"   

    - name: create a VPN connection for AZ1
      ec2_vpc_vpn:
        region: '{{ region }}'
        aws_secret_key: '{{ aws_secret_key }}'
        aws_access_key: '{{ aws_access_key }}'      
        state: present
        customer_gateway_id: '{{ cgw.results[0].gateway.customer_gateways[0].customer_gateway_id }}'
        vpn_gateway_id: '{{ vgw_id }}'
        tunnel_options:
          - TunnelInsideCidr: '169.254.101.{{ TunnelInsideCidr0 }}/30'
          - TunnelInsideCidr: '169.254.101.{{ TunnelInsideCidr1 }}/30'
      register: customer_gateway_configuration

    - name: Parse XML for AWS IPs
      xml:
        xmlstring: '{{ customer_gateway_configuration.customer_gateway_configuration }}'
        content: "text"
        xpath: "/vpn_connection/ipsec_tunnel/vpn_gateway/tunnel_outside_address/ip_address"
      register: tunnel_outside_address
      
    - name: Parse XML for Palo Tunnel IPs
      xml:
        xmlstring: '{{ customer_gateway_configuration.customer_gateway_configuration }}'
        content: "text"
        xpath: "/vpn_connection/ipsec_tunnel/customer_gateway/tunnel_inside_address/ip_address"
      register: tunnel_inside_address

    - name: Parse XML for AWS Tunnel IPs
      xml:
        xmlstring: '{{ customer_gateway_configuration.customer_gateway_configuration }}'
        content: "text"
        xpath: "/vpn_connection/ipsec_tunnel/vpn_gateway/tunnel_inside_address/ip_address"
      register: aws_tunnel_inside_address

    - name: Parse XML for tunnel PSKs
      xml:
        xmlstring: '{{ customer_gateway_configuration.customer_gateway_configuration }}'
        content: "text"
        xpath: "/vpn_connection/ipsec_tunnel/ike/pre_shared_key"
      register: pre_shared_key  
      
    - name: Add IKE gateway config to the firewall for AZ1
      panos_ike_gateway:
        username: '{{ username }}'
        password: '{{ password }}'
        ip_address: '{{ item.panorama }}'
        template: '{{ item.template }}'
        version: 'ikev2'        
        state: 'present' 
        name: 'IKE-GATE-{{ host }}-{{ item.availability_zones[0] }}'
        interface: '{{ item.untrust_int }}'
        enable_passive_mode: 'no'
        peer_ip_value: '{{ tunnel_outside_address.matches[0].ip_address }}'
        pre_shared_key: '{{ pre_shared_key.matches[0].pre_shared_key }}'
        ikev1_crypto_profile: 'ICP-DH_G2-AUTH_SHA256-EN_AES256'
        ikev2_crypto_profile: 'ICP-DH_G2-AUTH_SHA256-EN_AES256'
        commit: False 
      with_items:
        - "{{ hostvars[transit_fw_az1] }}"

    - name: Add IKE gateway config to the firewall for AZ2
      panos_ike_gateway:
        username: '{{ username }}'
        password: '{{ password }}'
        ip_address: '{{ item.panorama }}'
        template: '{{ item.template }}'
        version: 'ikev2'        
        state: 'present' 
        name: 'IKE-GATE-{{ host }}-{{ item.availability_zones[1] }}'
        interface: '{{ item.untrust_int }}'
        enable_passive_mode: 'no'
        peer_ip_value: '{{ tunnel_outside_address.matches[1].ip_address }}'
        pre_shared_key: '{{ pre_shared_key.matches[1].pre_shared_key }}'
        ikev1_crypto_profile: 'ICP-DH_G2-AUTH_SHA256-EN_AES256'
        ikev2_crypto_profile: 'ICP-DH_G2-AUTH_SHA256-EN_AES256'
        commit: False 
      with_items:
        - "{{ hostvars[transit_fw_az1] }}"

    - name: Creat VPC Security Zone
      panos_zone:
        username: '{{ username }}'
        password: '{{ password }}'
        ip_address: '{{ item.panorama }}'
        template: '{{ item.template }}'  
        zone: '{{ host }}'
        mode: 'layer3'
      with_items:
        - "{{ hostvars[transit_fw_az1] }}"
    
    - name: Create tunnel IP interfaces for AZ1
      panos_tunnel:
        username: '{{ username }}'
        password: '{{ password }}'
        ip_address: '{{ item.panorama }}'
        template: '{{ item.template }}'
        if_name: 'tunnel.{{ TunnelInterface0 }}'
        ip: ['{{ python_variables.item.stdout_lines[1] }}']
        vr_name: '{{ item.routing_instance }}'
        zone_name: "{{ host }}"
        commit: False
      with_items:
        - "{{ hostvars[transit_fw_az1] }}"

    - name: Create tunnel IP interfaces for AZ2
      panos_tunnel:
        username: '{{ username }}'
        password: '{{ password }}'
        ip_address: '{{ item.panorama }}'
        template: '{{ item.template }}'
        if_name: 'tunnel.{{ TunnelInterface1 }}'
        ip: ['{{ tunnel_inside_address.matches[1].ip_address }}/30']
        vr_name: '{{ item.routing_instance }}'
        zone_name: "{{ host }}"
        commit: False
      with_items:
        - "{{ hostvars[transit_fw_az1] }}"        
      
    - name: Create IPSec Tunnel for AZ1
      panos_ipsec_tunnel:
        username: '{{ username }}'
        password: '{{ password }}'
        ip_address: '{{ item.panorama }}'
        template: '{{ item.template }}'
        name: 'IPSSEC-TUN-{{ host }}-{{ item.availability_zones[0] }}'
        tunnel_interface: 'tunnel.{{ TunnelInterface0 }}'
        ak_ike_gateway: 'IKE-GATE-{{ host }}-{{ item.availability_zones[0] }}'
        ak_ipsec_crypto_profile: 'IPCP-EN-AES256_AU-AES256_DH_G2'
        state: 'present'
        commit: False   
      with_items:
        - "{{ hostvars[transit_fw_az1] }}"

    - name: Create IPSec Tunnel for AZ2
      panos_ipsec_tunnel:
        username: '{{ username }}'
        password: '{{ password }}'
        ip_address: '{{ item.panorama }}'
        template: '{{ item.template }}'
        name: 'IPSSEC-TUN-{{ host }}-{{ item.availability_zones[1] }}'
        tunnel_interface: 'tunnel.{{ TunnelInterface1 }}'
        ak_ike_gateway: 'IKE-GATE-{{ host }}-{{ item.availability_zones[1] }}'
        ak_ipsec_crypto_profile: 'IPCP-EN-AES256_AU-AES256_DH_G2'
        state: 'present'
        commit: False   
      with_items:
        - "{{ hostvars[transit_fw_az1] }}"

    - name: Create BGP Peer Group
      panos_bgp_peer_group:
        username: '{{ username }}'
        password: '{{ password }}'
        ip_address: '{{ item.panorama }}'
        template: '{{ item.template }}'
        name: 'PG-AWS-DEV'
        type: 'ebgp'
        vr_name: '{{ item.routing_instance }}'
        remove_private_as: no
        enable: true
        commit: false
      with_items:
        - "{{ hostvars[transit_fw_az1] }}"

    - name: Create BGP Peer
      panos_bgp_peer:
        username: '{{ username }}'
        password: '{{ password }}'
        ip_address: '{{ item.panorama }}'
        template: '{{ item.template }}'
        peer_group: 'PG-AWS-DEV'
        name: "{{ host }}"
        vr_name: '{{ item.routing_instance }}'
        enable: true
        local_interface: 'tunnel.{{ TunnelInterface0 }}'
        peer_address_ip: '{{ python_variables.stdout_lines[0] }}'
        peer_as: '64512'
        commit: false
      with_items:
        - "{{ hostvars[transit_fw_az1] }}"

